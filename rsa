#!/usr/bin/python3

import sys
import time
from math import sqrt

def is_prime(num, k=20):
    '''
    Check if a number is likely to be prime using the Miller-Rabin primality test.
    '''
    if num == 2 or num == 3:
        return True
    if num < 2 or num % 2 == 0:
        return False

    d = num - 1
    r = 0
    while d % 2 == 0:
        d //= 2
        r += 1

    for _ in range(k):
        a = random.randint(2, num - 2)
        x = pow(a, d, num)
        if x == 1 or x == num - 1:
            continue
        for _ in range(r - 1):
            x = pow(x, 2, num)
            if x == num - 1:
                break
        else:
            return False

    return True

def factor_rsa_number(n):
    '''
    Factor a single RSA number using the trial division method.
    '''
    factors = []
    while n % 2 == 0:
        factors.append(2)
        n //= 2
    i = 3
    while i <= sqrt(n):
        if n % i == 0:
            factors.append(i)
            n //= i
        else:
            i += 2
    if n > 2:
        factors.append(n)
    if len(factors) == 1:
        p = factors[0]
        q = n // p
        return (p, q)
    else:
        pq = []
        for factor in factors:
            if is_prime(factor):
                pq.append(factor)
            else:
                p, q = factor_rsa_number(factor)
                pq.append(p)
                pq.append(q)
        return tuple(pq)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: rsa <file>")
        exit()

    input_file = sys.argv[1]

    try:
        with open(input_file, 'r') as f:
            rsa_numbers = [int(line.strip()) for line in f.readlines()]
    except FileNotFoundError:
        print("File not found")
        exit()

    start_time = time.time()

    for n in rsa_numbers:
        p, q = factor_rsa_number(n)
        print(f"{n}={q}*{p}")

    end_time = time.time()
    exec_time = end_time - start_time

    print("Total execution time:", exec_time, "seconds")
